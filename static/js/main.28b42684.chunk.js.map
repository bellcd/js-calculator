{"version":3,"sources":["components/Button.js","components/Grid.js","components/Display.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","icon","onButtonPress","className","onClick","e","Grid","buttonElements","map","number","key","Display","display","previousCommand","App","props","state","firstTerm","secondTerm","currentOperator","currentResult","displayResult","moreEqualsPresses","lastPressedButton","this","setState","slice","indexOf","result","toAdd","Object","assign","operator","computeResult","undefined","Number","buttonChar","target","textContent","buttonClear","buttonDelete","isNaN","buttonDecimal","buttonOperator","buttonEquals","buttonPlusMinus","buttonPercent","buttonNumber","buttonPress","bind","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28b42684.chunk.js","sourcesContent":["import React from 'react';\n\nlet Button = ({icon, onButtonPress}) => {\n  return (\n    <div className=\"keypad-button\" onClick={(e) => onButtonPress(e)}>{icon}</div>\n  );\n}\n\nexport default Button;","import React from 'react';\nimport Button from './Button.js';\n\nlet Grid = ({onButtonPress}) => {\n  let icons = ['clear', '%', '+/-', '/', 7, 8, 9, 'x', 4, 5, 6, '-', 1, 2, 3, '+', 0, '.', 'delete', '='];\n  let buttonElements = icons.map((number) => {\n    return <Button\n      icon={number}\n      key={number}\n      onButtonPress={onButtonPress}\n    />\n  });\n  return (\n    <div className=\"grid\">\n      {buttonElements}\n    </div>\n  );\n}\n\nexport default Grid;","import React from 'react';\n\nlet Display = ({display, previousCommand}) => {\n  return (\n    <div className=\"display-container\">\n      <div className=\"display\">{display}</div>\n      <div className=\"previous-command\">{previousCommand}</div>\n    </div>\n  );\n}\n\nexport default Display;","import React from 'react';\nimport '../App.css';\nimport Grid from './Grid.js';\nimport Display from './Display.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstTerm: '',\n      secondTerm: '',\n      currentOperator: '',\n      currentResult: '',\n      previousCommand: '',\n      display: '0',\n      displayResult: false,\n      moreEqualsPresses: '',\n      lastPressedButton: ''\n    }\n  }\n\n  display() {\n    this.setState((state) => {\n      return {display: state.displayResult ? state.firstTerm : `${state.firstTerm === '' ? '' : state.firstTerm}${state.currentOperator === '' ? '' : ' ' + state.currentOperator + ' '}${state.secondTerm === '' ? '' : state.secondTerm}`}\n    });\n  }\n\n  buttonClear() {\n    this.setState((state) => {\n      if (state.firstTerm === '' && state.currentOperator === '' && state.secondTerm === '') {\n        return {\n          previousCommand: '',\n          displayResult: false\n        }\n      } else {\n        return {\n          firstTerm: '',\n          currentOperator: '',\n          secondTerm: '',\n          displayResult: false,\n          currentResult: '',\n          moreEqualsPresses: ''\n        }\n      }\n    }\n    );\n\n    this.setState((state) => {\n      return {lastPressedButton: 'clear'}\n    });\n\n    this.display();\n  }\n\n  buttonDelete() {\n    this.setState((state) => {\n      if (state.secondTerm !== '') {\n        return {secondTerm: state.secondTerm.slice(0, -1)}\n      } else if (state.secondTerm === '' && state.currentOperator !== '') {\n        return {currentOperator: ''}\n      } else if (state.secondTerm === '' && state.currentOperator === '' && state.firstTerm !== '') {\n        return {firstTerm: state.firstTerm.slice(0, -1)}\n      }\n    });\n\n    this.setState((state) => {\n      return {lastPressedButton: 'delete'}\n    });\n\n    this.display();\n  }\n\n  buttonNumber(number) {\n    this.setState((state) => {\n      if (state.firstTerm === '') {\n        return {firstTerm: number}\n      } else if (state.firstTerm !== '' && state.currentOperator === '') {\n        return {firstTerm: state.firstTerm + number}\n      } else if (state.firstTerm !== '' && state.currentOperator !== '' && state.secondTerm === '') {\n        return {secondTerm: number}\n      } else {\n        return {secondTerm: state.secondTerm + number}\n      }\n    });\n\n    this.setState((state) => {\n      return {displayResult: false, lastPressedButton: 'number'}\n    })\n\n    this.display();\n  }\n\n  buttonDecimal() {\n    this.setState((state) => {\n      if (state.firstTerm === '') {\n        return {firstTerm: '0.'}\n      } else if (state.firstTerm !== '' && state.currentOperator === '' && state.firstTerm.indexOf('.') === -1) {\n        return {firstTerm: state.firstTerm + '.'}\n      } else if (state.firstTerm !== '' && state.currentOperator !== '' && state.lastPressedButton === 'operator') {\n        return {secondTerm: '0.'}\n      } else if (state.secondTerm !== '' && state.secondTerm.indexOf('.') === -1){\n        return {secondTerm: state.secondTerm + '.'}\n      } else {\n        return {\n          firstTerm: '0.',\n          secondTerm: '',\n          currentOperator: ''\n        }\n      }\n    });\n\n    this.setState((state) => {\n      return {displayResult: false, lastPressedButton: 'decimal'}\n    })\n\n    this.display();\n  }\n\n  buttonPlusMinus() {\n    this.setState((state) => {\n      let result;\n      let toAdd = {lastPressedButton: 'plusMinus'};\n      if (state.secondTerm === '' && state.firstTerm !== '') {\n        result = Object.assign({}, toAdd, {firstTerm: state.firstTerm * -1});\n      } else if (state.secondTerm !== '') {\n        result = Object.assign({}, toAdd, {secondTerm: state.secondTerm * -1});\n      }\n      return result;\n    });\n\n    this.display();\n  }\n\n  buttonPercent() {\n    this.setState((state) => {\n      let result;\n      let toAdd = {lastPressedButton: 'percent'};\n      if (state.secondTerm === '' && state.firstTerm !== '') {\n        result = Object.assign({}, toAdd, {firstTerm: state.firstTerm / 100});\n      } else if (state.secondTerm !== '') {\n        result = Object.assign({}, toAdd, {secondTerm: state.secondTerm / 100});\n      }\n      return result;\n    });\n\n    this.display();\n  }\n\n  buttonOperator(operator) {\n    this.setState((state) => {\n      return {displayResult: false}\n    })\n\n    this.setState((state) => {\n      if (state.firstTerm === '') {\n        return {firstTerm: '0', currentOperator: operator}\n      } else if (state.firstTerm !== '' && state.operator === '') {\n        return {currentOperator: operator}\n      } else if (state.firstTerm !== '' && state.operator !== '' && state.secondTerm === '') {\n        return {currentOperator: operator}\n      } else {\n      }\n    });\n\n    this.setState((state) => {\n      return {lastPressedButton: 'operator'}\n    });\n\n    this.display();\n  }\n\n  buttonEquals() {\n    this.setState((state) => {\n      return {displayResult: false}\n    })\n\n    this.setState((state) => {\n      if (state.firstTerm === '') {\n        // do nothing\n      } else if (state.firstTerm !== '' && state.currentOperator === '') {\n        // do nothing\n      } else if (state.firstTerm !== '' && state.currentOperator !== '' && state.secondTerm === '' && state.moreEqualsPresses !== '') {\n        let result = this.computeResult(undefined, undefined, state.moreEqualsPresses);\n        return {\n          currentResult: result + '',\n          firstTerm: result + '',\n          // moreEqualsPresses stays as it is\n          // secondTerm statys as it is\n          // currentOperator stays as it is\n          previousCommand: `${state.firstTerm} ${state.currentOperator} ${state.moreEqualsPresses}`,\n          displayResult: true\n        }\n      } else {\n        let result = this.computeResult();\n        return {\n          currentResult: result + '',\n          firstTerm: result + '',\n          moreEqualsPresses: state.secondTerm,\n          secondTerm: '',\n          // currentOperator stays as it is\n          previousCommand: `${state.firstTerm} ${state.currentOperator} ${state.secondTerm}`,\n          displayResult: true\n        }\n      }\n    });\n\n    this.setState((state) => {\n      return {lastPressedButton: 'equals'}\n    });\n\n    this.display();\n  }\n\n  computeResult(firstTerm, operator, secondTerm) {\n    let result = null;\n    firstTerm = firstTerm === undefined ? Number(this.state.firstTerm) : Number(firstTerm);\n    operator = operator === undefined ? this.state.currentOperator : operator;\n    secondTerm = secondTerm === undefined ? Number(this.state.secondTerm) : Number(secondTerm);\n\n    if (operator === '+') {\n      result = firstTerm + secondTerm;\n    } else if (operator === '-') {\n      result = firstTerm - secondTerm;\n    } else if (operator === '/') {\n      result = firstTerm / secondTerm;\n    } else if (operator === 'x') {\n      result = firstTerm * secondTerm;\n    }\n\n    return result;\n  }\n\n  buttonPress(e) {\n    let buttonChar = e.target.textContent;\n\n    if (buttonChar === 'clear') {\n      this.buttonClear();\n    } else if (buttonChar === 'delete') {\n      this.buttonDelete();\n    } else if (typeof Number(buttonChar) === 'number' && !Number.isNaN(Number(buttonChar))) {\n      this.buttonNumber(buttonChar);\n    } else if (buttonChar === '.') {\n      this.buttonDecimal();\n    } else if (buttonChar === '+' || buttonChar === '-' || buttonChar === 'x' || buttonChar === '/') {\n      this.buttonOperator(buttonChar);\n    } else if (buttonChar === '=') {\n      this.buttonEquals();\n    } else if (buttonChar === '+/-') {\n      this.buttonPlusMinus();\n    } else if (buttonChar === '%') {\n      this.buttonPercent();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\">JavaScript Calculator</h1>\n        <div className=\"calc-container\">\n          <div>\n            <Display display={this.state.display} previousCommand={this.state.previousCommand}/>\n            <Grid onButtonPress={this.buttonPress.bind(this)}/>\n          </div>\n        </div>\n        <footer className=\"footer\">Made with ❤️ by <a href=\"https://bellcd.github.io/\">Christian Bell</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}